import { Runtype, OptionalRuntype, Collapse, Unpack } from './runtype';
export declare function getRecordFields(r: Runtype<any>): {
    [key: string]: Runtype<any>;
} | undefined;
/**
 * An object with defined keys and values.
 *
 * In contrast to typescript types, objects checked by this runtype will fail
 * if they have any additional keys (strict checking) not specified in
 * typemap.
 *
 * Keeps you save from unwanted propertiers and evil __proto__ injections.
 */
export declare function record<T, Typemap = {
    [K in keyof T]: Runtype<T[K]> | OptionalRuntype<T[K]>;
}, OptionalKeys extends keyof Typemap = {
    [K in keyof Typemap]: Typemap[K] extends OptionalRuntype<any> ? K : never;
}[keyof Typemap]>(typemap: Typemap): Runtype<Collapse<{
    [K in Exclude<keyof Typemap, OptionalKeys>]: Unpack<Typemap[K]>;
} & {
    [K in OptionalKeys]?: Unpack<Typemap[K]>;
}>>;
/**
 * Like record but ignore unknown keys.
 *
 * Returns a new object that only contains the keys specified in the typemap.
 * Additional keys are ignored.
 *
 * Keeps you save from unwanted propertiers and evil __proto__ injections.
 */
export declare function sloppyRecord<T, Typemap = {
    [K in keyof T]: Runtype<T[K]> | OptionalRuntype<T[K]>;
}, OptionalKeys extends keyof Typemap = {
    [K in keyof Typemap]: Typemap[K] extends OptionalRuntype<any> ? K : never;
}[keyof Typemap]>(typemap: Typemap): Runtype<Collapse<{
    [K in Exclude<keyof Typemap, OptionalKeys>]: Unpack<Typemap[K]>;
} & {
    [K in OptionalKeys]?: Unpack<Typemap[K]>;
}>>;
